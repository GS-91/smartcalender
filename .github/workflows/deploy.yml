name: Docker CI/CD

on:
  workflow_dispatch:

env:
  AWS_REGION: eu-central-1
  ECR_REPOSITORY: smartcalender-api
  IMAGE_TAG: latest

jobs:
  build-and-deploy:
    name: üê≥ Build & Push Docker image to ECR
    runs-on: ubuntu-latest

    steps:
      - name: üì¶ Checkout code
        uses: actions/checkout@v3

      - name: üîê Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: üîë Decode credentials.json from secret
        run: |
          mkdir -p app/api
          echo "${{ secrets.CREDENTIALS_JSON_B64 }}" | base64 -d > app/api/credentials.json

      - name: üîë Decode api_key.txt from secret
        run: |
          echo "${{ secrets.API_KEY_TXT_B64 }}" | base64 -d > app/api_key.txt

      - name: ‚öôÔ∏è Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: üîê Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: üõ†Ô∏è Build Docker image
        run: |
          IMAGE_URI="${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}"
          docker build -t $IMAGE_URI:$IMAGE_TAG -f Dockerfile .

      - name: üöÄ Push Docker image to ECR
        run: |
          IMAGE_URI="${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}"
          docker push $IMAGE_URI:$IMAGE_TAG

      - name: ‚òÅÔ∏è Deploy to Amazon ECS (Fargate)
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          cluster: ${{ secrets.ECS_CLUSTER }}
          service: ${{ secrets.ECS_SERVICE }}
          task-definition: ${{ secrets.ECS_TASK_DEFINITION_FAMILY }}
          wait-for-service-stability: true
